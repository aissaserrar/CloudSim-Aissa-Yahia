/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui;

import User.User;
import Cloudlet.MyCloudlet;

import Cloudlet.MyVM;
import Datacenter.Charactristic;
import Datacenter.MyDatacenter;
import Datacenter.MyHost;
import Datacenter.MyPE;
import java.awt.event.ItemEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Semaphore;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import org.cloudbus.cloudsim.Cloudlet;
import org.cloudbus.cloudsim.DatacenterCharacteristics;
import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Log;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.VmSchedulerSpaceShared;
import org.cloudbus.cloudsim.VmSchedulerTimeShared;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.network.datacenter.AggregateSwitch;
import org.cloudbus.cloudsim.network.datacenter.EdgeSwitch;
import org.cloudbus.cloudsim.network.datacenter.NetDatacenterBroker;
import org.cloudbus.cloudsim.network.datacenter.NetworkConstants;
import org.cloudbus.cloudsim.network.datacenter.NetworkDatacenter;
import org.cloudbus.cloudsim.network.datacenter.NetworkHost;
import org.cloudbus.cloudsim.network.datacenter.NetworkVmAllocationPolicy;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;

/**
 *
 * @author aissa
 */
public class Gui extends javax.swing.JFrame {
    ArrayList<User> listUser=new ArrayList<User>();
    private static List<NetworkDatacenter> datacenterList;
    User user;
    static int position=0;
    int countU=0;
    int selectU=-1;
    ArrayList<NetDatacenterBroker> listBroker;
    private DefaultTableModel modelU;
    ArrayList<MyDatacenter> listDataCenter=new ArrayList<>();
    ArrayList<String> listTim=new ArrayList<>();
    private MyDatacenter Datacenter=null;
    private MyHost Host=null;
    private MyPE Pe=null;
    private DefaultTableModel modeld1;
    private DefaultTableModel modeld2;
    private DefaultTableModel modeld3;
    private int slectrowd1=-1;
    private int slectrowd2=-1;
    private int slectrowd3=-1;
    private int countd=0;
    private int countd1=0;
    private int countd2=0;


    int countc=0;
    int countc1=0;
    private DefaultTableModel modelc1;
    private DefaultTableModel modelc2;
    private int selectrowc1=-1;
    private int selectrowc2=-1;
    MyCloudlet cloudlet1;
    MyVM vm1;
    Semaphore sem;



    public Gui() {

        initComponents();
        sem = new Semaphore(1);
        modeld1=(DefaultTableModel) jTable1.getModel();
        modeld2=(DefaultTableModel) jTable2.getModel();
        modeld3=(DefaultTableModel) jTable3.getModel();
        cloudlet1=null;
        vm1=null;
        modelc1=(DefaultTableModel) jTablec2.getModel();
        modelc2=(DefaultTableModel) jTablec3.getModel();
        modelU=(DefaultTableModel) jTable4.getModel();
        jComboBox2.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTablec2 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTablec3 = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        click = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jComboBox2 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        click2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        click1 = new javax.swing.JButton();
        sumilation = new javax.swing.JPanel();
        jButton16 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton17 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        resTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cloud Project Aissa&Yahia");
        setBackground(new java.awt.Color(0, 102, 102));

        jPanel2.setMaximumSize(new java.awt.Dimension(1300, 700));
        jPanel2.setMinimumSize(new java.awt.Dimension(1300, 700));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton7.setBackground(new java.awt.Color(153, 255, 204));
        jButton7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton7.setText("Create Cloudlet");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });
        jPanel2.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 350, -1, -1));

        jTablec2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Length", "Fil Size", "Output Size"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablec2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablec2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTablec2);

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 390, 860, 300));

        jButton8.setText("Update Cloudlet");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });
        jPanel2.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 430, -1, -1));

        jButton9.setText("Delete Cloudlet");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });
        jPanel2.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 630, -1, -1));

        jButton10.setBackground(new java.awt.Color(153, 255, 204));
        jButton10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton10.setText("Create VM");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton10MouseClicked(evt);
            }
        });
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 10, -1, -1));

        jTablec3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "MIPS", "SIZE", "RAM", "BW", "PESNUM", "VMM"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablec3.setGridColor(new java.awt.Color(102, 0, 51));
        jTablec3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablec3MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTablec3);

        jPanel2.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, 860, 280));

        jButton11.setText("Update VM");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton11MouseClicked(evt);
            }
        });
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 300, -1, -1));

        jButton12.setText("Delete VM");
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton12MouseClicked(evt);
            }
        });
        jPanel2.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 300, -1, -1));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nom", "Prenom", "time creat"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setResizable(false);
        }

        jPanel2.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 390, 640));

        jButton13.setBackground(new java.awt.Color(153, 255, 204));
        jButton13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton13.setText("Create User");
        jButton13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton13MouseClicked(evt);
            }
        });
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, -1));

        jButton14.setText("Update User");
        jButton14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton14MouseClicked(evt);
            }
        });
        jPanel2.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 660, -1, -1));

        jButton15.setText("Delete User");
        jButton15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton15MouseClicked(evt);
            }
        });
        jPanel2.add(jButton15, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 660, -1, -1));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Create Cloudlet");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 340, -1, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Create User");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Create VM");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, -1, -1));

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 700));

        jTabbedPane1.addTab("user", jPanel2);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Create Datacenter");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        click.setBackground(new java.awt.Color(153, 255, 204));
        click.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        click.setText("add");
        click.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickMouseClicked(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(153, 255, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("update");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(153, 255, 204));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("remove");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NAME", "ARCH", "OS", "VMM", "timZon", "COST", "CMEM", "CSTORAGE", "CBW", "time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jComboBox1.setBackground(new java.awt.Color(153, 255, 204));
        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VmAllocationPolicySimple" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "MIPS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jComboBox2.setBackground(new java.awt.Color(153, 255, 204));
        jComboBox2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VmSchedulerTimeShared", "VmSchedulerSpaceShared" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "RAM", "STORAG", "BW"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton6.setBackground(new java.awt.Color(153, 255, 204));
        jButton6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton6.setText("remove");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        click2.setBackground(new java.awt.Color(153, 255, 204));
        click2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        click2.setText("add");
        click2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                click2MouseClicked(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(153, 255, 204));
        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("update");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(153, 255, 204));
        jButton5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton5.setText("update");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 255, 204));
        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("remove");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        click1.setBackground(new java.awt.Color(153, 255, 204));
        click1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        click1.setText("add");
        click1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                click1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(click, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1050, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jComboBox2, 0, 212, Short.MAX_VALUE)
                                .addGap(129, 129, 129)
                                .addComponent(click1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(click2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(click)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton6)
                        .addComponent(click2)
                        .addComponent(jButton4)
                        .addComponent(jButton3)
                        .addComponent(jButton5))
                    .addComponent(click1)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 700));

        jTabbedPane1.addTab("datacenter", jPanel1);

        sumilation.setBackground(new java.awt.Color(0, 102, 102));

        jButton16.setBackground(new java.awt.Color(153, 255, 204));
        jButton16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton16.setText("Start Simulation");
        jButton16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton16MouseClicked(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane7.setViewportView(jTextArea1);

        jButton17.setBackground(new java.awt.Color(255, 0, 51));
        jButton17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton17.setText("Stop Simulation");
        jButton17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton17MouseClicked(evt);
            }
        });

        resTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                    "Cloudlet ID","STATUS" , "Data center ID","VM ID","Time" ,"Start Time","Finish Time"
            }
        ));
        jScrollPane8.setViewportView(resTable);

        javax.swing.GroupLayout sumilationLayout = new javax.swing.GroupLayout(sumilation);
        sumilation.setLayout(sumilationLayout);
        sumilationLayout.setHorizontalGroup(
            sumilationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sumilationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sumilationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sumilationLayout.createSequentialGroup()
                        .addComponent(jButton16)
                        .addGap(18, 18, 18)
                        .addComponent(jButton17)
                        .addContainerGap(1016, Short.MAX_VALUE))
                    .addGroup(sumilationLayout.createSequentialGroup()
                        .addComponent(jScrollPane8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))))
        );
        sumilationLayout.setVerticalGroup(
            sumilationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sumilationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sumilationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton16)
                    .addComponent(jButton17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sumilationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sumilationLayout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 169, Short.MAX_VALUE))
                    .addComponent(jScrollPane8))
                .addContainerGap())
        );

        jTabbedPane1.addTab("sumulation", sumilation);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        modeld2.setRowCount(0);
        modeld3.setRowCount(0);

        slectrowd2=-1;
        slectrowd3=-1;
        slectrowd1=jTable1.getSelectedRow();
        Datacenter=getDatacenter1();
        System.out.println(slectrowd1);
        if(!Datacenter.getHost().isEmpty())
        {
            jComboBox2.setSelectedIndex(Integer.parseInt(Datacenter.getHost().get(0).getPolic()));
            for(int i=0;i<Datacenter.getHost().size();i++)
            {
                modeld2.addRow(new Object[]{Datacenter.getHost().get(i).getId(),Datacenter.getHost().get(i).getRam(),Datacenter.getHost().get(i).getStorage(),Datacenter.getHost().get(i).getBw()});
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void clickMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickMouseClicked

        Charactristic car=new Charactristic();
        MyDatacenter datacenter=new MyDatacenter();
        datacenter.setName("datacenter_"+countd);
        datacenter.setPolice("VmAllocationPolicySimple");
        datacenter.setHost(new ArrayList<MyHost>());
        datacenter.setCharacteristics(car);
        datacenter.setTime("0");
        car.setArchitecture("x86");
        car.setOs("Linux");
        car.setVmm("Xen");
        car.setTimeZone("10");
        car.setCostPerSecond("3");
        car.setCostPerMem("0.05");
        car.setCostPerStorage("0.001");
        car.setCostPerBw("0");
        listDataCenter.add(datacenter);
        modeld1.addRow(new Object[]{countd,datacenter.getName(),"x86","Linux","Xen",10,3,0.05,0.001,0,0});
        countd++;
    }//GEN-LAST:event_clickMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

        Datacenter.getCharacteristics().setArchitecture(modeld1.getValueAt(slectrowd1,2).toString());
        Datacenter.getCharacteristics().setOs(modeld1.getValueAt(slectrowd1,3).toString());
        Datacenter.getCharacteristics().setVmm(modeld1.getValueAt(slectrowd1,4).toString());
        Datacenter.getCharacteristics().setTimeZone(modeld1.getValueAt(slectrowd1,5).toString());
        Datacenter.getCharacteristics().setCostPerSecond(modeld1.getValueAt(slectrowd1,6).toString());
        Datacenter.getCharacteristics().setCostPerMem(modeld1.getValueAt(slectrowd1,7).toString());
        Datacenter.getCharacteristics().setCostPerStorage(modeld1.getValueAt(slectrowd1,8).toString());
        Datacenter.getCharacteristics().setCostPerBw(modeld1.getValueAt(slectrowd1,9).toString());
        Datacenter.setTime(modeld1.getValueAt(slectrowd1,10).toString());
        System.out.println(Datacenter.getTime());

    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked

        System.out.println(listDataCenter.contains(Datacenter));
        listDataCenter.remove(Datacenter);
        System.out.println(listDataCenter.contains(Datacenter));
        modeld1.removeRow(slectrowd1);
        modeld2.setRowCount(0);
        modeld3.setRowCount(0);

        Datacenter=null;
        slectrowd1=-1;
        slectrowd2=-1;
        slectrowd3=-1;
    }//GEN-LAST:event_jButton2MouseClicked

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        System.out.println("passed...");

        slectrowd2=jTable2.getSelectedRow();
        Host=getHost(Datacenter.getHost());
        System.out.println(slectrowd2);
        modeld3.setRowCount(0);
        slectrowd3=-1;
        if(!Host.getListpe().isEmpty())
        {

            for(int i=0;i<Host.getListpe().size();i++)
            {
                modeld3.addRow(new Object[]{Host.getListpe().get(i).getId(),Host.getListpe().get(i).getMips()});
            }
        }

    }//GEN-LAST:event_jTable2MouseClicked

    private void click1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_click1MouseClicked
        System.out.println("passed...");
        jComboBox2.setVisible(true);
        MyHost host=new MyHost();
        host.setPolic("0");
        host.setListpe(new ArrayList<MyPE>());
        host.setId(countd1+"");
        host.setRam("2048");
        host.setStorage("1000000");
        host.setBw("10000");
        Datacenter.getHost().add(host);
        modeld2.addRow(new Object[]{countd1,"2048","1000000","10000"});
        System.out.println(Datacenter.getHost().get(0).getId());
        countd1++;
    }//GEN-LAST:event_click1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked

        Host.setRam((modeld2.getValueAt(slectrowd2,1).toString()));
        Host.setStorage((modeld2.getValueAt(slectrowd2,2).toString()));
        Host.setBw((modeld2.getValueAt(slectrowd2,3).toString()));
        System.out.println(Host.getRam());
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked

        System.out.println(Datacenter.getHost().contains(Host));
        Datacenter.getHost().remove(Host);
        System.out.println(Datacenter.getHost().contains(Host));
        modeld2.removeRow(slectrowd2);// TODO add your handling code here:
        modeld3.setRowCount(0);
        Host=null;
        slectrowd2=-1;
        slectrowd3=-1;
    }//GEN-LAST:event_jButton4MouseClicked

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
        slectrowd3=jTable3.getSelectedRow();
        Pe=getPe(Host.getListpe());

    }//GEN-LAST:event_jTable3MouseClicked

    private void click2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_click2MouseClicked

        MyPE pe=new MyPE();
        pe.setId(countd2+"");
        pe.setMips("1000");
        Host.getListpe().add(pe);
        modeld3.addRow(new Object[]{countd2,"1000"});
        countd2++;
    }//GEN-LAST:event_click2MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked

        Pe.setMips((modeld3.getValueAt(slectrowd3,1).toString()));
        System.out.println(Pe.getMips());

    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked

        System.out.println(Host.getListpe().contains(Pe));
        Host.getListpe().remove(Pe);
        System.out.println(Host.getListpe().contains(Pe));
        modeld3.removeRow(slectrowd3);
        Pe=null;
        slectrowd3=-1;
        jButton4.setEnabled(true);
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        MyCloudlet cloud=new MyCloudlet();
        cloud.setId(countc+"");
        cloud.setFilsize("300");
        cloud.setOutpute("300");
        cloud.setLenght("400000");
        vm1.getCloud().add(cloud);
        modelc1.addRow(new Object[]{countc,"400000","300","300"});
        countc++;

    }//GEN-LAST:event_jButton7MouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked

        System.out.println(cloudlet1.getId());
        cloudlet1.setLenght(modelc1.getValueAt(selectrowc1,1).toString());
        cloudlet1.setFilsize(modelc1.getValueAt(selectrowc1,2).toString());
        cloudlet1.setOutpute(modelc1.getValueAt(selectrowc1,3).toString());
        System.out.println(cloudlet1.getLenght()+" "+cloudlet1.getFilsize()+" "+cloudlet1.getOutpute());
    }//GEN-LAST:event_jButton8MouseClicked

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
        System.out.println(  vm1.getCloud().contains(cloudlet1));
        vm1.getCloud().remove(cloudlet1);
        cloudlet1=null;
        System.out.println(  vm1.getCloud().contains(cloudlet1));
        modelc1.removeRow(selectrowc1);// TODO add your handling code here:
        selectrowc1=-1;


    }//GEN-LAST:event_jButton9MouseClicked

    private void jTablec2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablec2MouseClicked
        selectrowc1=jTablec2.getSelectedRow();
        cloudlet1=getcloud(vm1.getCloud());
        System.out.println(selectrowc1);
    }//GEN-LAST:event_jTablec2MouseClicked

    private void jButton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseClicked
        System.out.println("passed...");
        MyVM vm=new MyVM();
        vm.setCloud(new ArrayList<MyCloudlet>());
        vm.setId(countc1+"");
        vm.setMips("1");
        vm.setSize("10000");
        vm.setRam("512");
        vm.setBw("1000");
        vm.setPesNum("1");
        vm.setVmm("xen");
        modelc2.addRow(new Object[]{countc1,"1","10000","512","1000","1","xen"});
        countc1++;
        user.getVm().add(vm);

    }//GEN-LAST:event_jButton10MouseClicked

    private void jTablec3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablec3MouseClicked
        selectrowc2=jTablec3.getSelectedRow();
        vm1=getVm(user.getVm());
        modelc1.setRowCount(0);
        selectrowc1=-1;
        for(MyCloudlet cloud:vm1.getCloud())
        {
            modelc1.addRow(new Object[]{cloud.getId(),cloud.getLenght(),cloud.getFilsize(),cloud.getOutpute()});
        }

        System.out.println(vm1.getRam());
    }//GEN-LAST:event_jTablec3MouseClicked

    private void jButton13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton13MouseClicked
        User u=new User();
        u.setVm(new ArrayList<MyVM>());
        u.setId(countU+"");
        u.setNom("Fisrtname");
        u.setPrenom("Lastname");
        u.setTimeC("0");


        listTim.add("0");
        modelU.addRow(new Object[]{countU,"Fisrtname","Lastname","0"});
        listUser.add(u);
        countU++;
        System.out.println(listTim.remove(0));
    }//GEN-LAST:event_jButton13MouseClicked

    private void jButton14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton14MouseClicked
        user.setNom(modelU.getValueAt(selectU,1).toString());
        user.setPrenom(modelU.getValueAt(selectU,2).toString());
        user.setTimeC(modelU.getValueAt(selectU,3).toString());
        System.out.println(user.getNom()+" "+user.getPrenom());


    }//GEN-LAST:event_jButton14MouseClicked

    private void jButton15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton15MouseClicked
        System.out.println(listUser.contains(user));
        listUser.remove(user);
        System.out.println(listUser.contains(user));
        modelU.removeRow(selectU);
        user=null;
        selectU=-1;
        selectrowc1=-1;
        selectrowc2=-1;
        modelc1.setNumRows(0);
        modelc2.setNumRows(0);

    }//GEN-LAST:event_jButton15MouseClicked

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        selectU=jTable4.getSelectedRow();
        user=getUsre();
        modelc1.setNumRows(0);
        modelc2.setNumRows(0);
        for(MyVM vm:user.getVm())
        {
            modelc2.addRow(new Object[]{vm.getId(),vm.getMips(),vm.getSize(),vm.getRam(),vm.getBw(),vm.getPesNum(),vm.getVmm()});
        }
    }//GEN-LAST:event_jTable4MouseClicked

    private void jButton16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton16MouseClicked
        Collections.sort(listUser, new Comparator<User>() {
            @Override
            public int compare(User u1, User u2) {
                return u1.getTimeC().compareTo(u2.getTimeC());
            }
        });



        Log.printLine("Starting...");
        jTextArea1.setText("");

        try {
            int num_user = listUser.size(); // number of cloud users
            Calendar calendar = Calendar.getInstance();
            boolean trace_flag = false; // mean trace events

            // Initialize the CloudSim library
            CloudSim.init(num_user, calendar, trace_flag);



            // Second step: Create Datacenters
            // Datacenters are the resource providers in CloudSim. We need at
            // list one of them to run a CloudSim simulation
            datacenterList=new ArrayList<>();
            for(MyDatacenter datacenter:listDataCenter)
            {

                datacenterList.add(createDatacenter(datacenter));

            }

            listBroker=new ArrayList<>();
            for(User u:listUser)
            {

                NetDatacenterBroker broker = createBroker("Broker_"+u.getId());
                data=broker;
                broker.user=u;
                listBroker.add(broker);

            }




            // Third step: Create Broker

            // broker.setLinkDC(datacenter0);
            // Fifth step: Create one Cloudlet



            // Sixth step: Starts the simulation
            CloudSim.startSimulation();



            // Final step: Print results when simulation is over
            for(NetDatacenterBroker brok:listBroker)
            {
                List<Cloudlet> newList = brok.getCloudletReceivedList();
                printCloudletList(newList);

                System.out.println("numberofcloudlet " + newList.size() + " Cached "
                        + NetDatacenterBroker.cachedcloudlet + " Data transfered "
                        + NetworkConstants.totaldatatransfer);
            }
            Log.printLine("finished!");
        } catch (Exception e) {
            e.printStackTrace();
            Log.printLine("Unwanted errors happen");
        }





        CloudSim.stopSimulation();
    }//GEN-LAST:event_jButton16MouseClicked

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
            Datacenter.setPolice((String)evt.getItem());
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
            for(MyHost h:Datacenter.getHost())
            {
                h.setPolic(jComboBox2.getSelectedIndex()+"");
            }
    }//GEN-LAST:event_jComboBox2ItemStateChanged



    private void jButton17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton17MouseClicked
        data.sendf();
    }//GEN-LAST:event_jButton17MouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseClicked
        user.getVm().remove(vm1);
        modelc2.removeRow(selectrowc2);
        selectrowc2=-1;
        selectrowc1=-1;
        vm1=null;
        modelc1.setNumRows(0);
    }//GEN-LAST:event_jButton12MouseClicked

    private void jButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseClicked

        vm1.setMips(modelc2.getValueAt(selectrowc2,1).toString());
        vm1.setSize(modelc2.getValueAt(selectrowc2,2).toString());
        vm1.setRam(modelc2.getValueAt(selectrowc2,3).toString());
        vm1.setBw(modelc2.getValueAt(selectrowc2,4).toString());
        vm1.setPesNum(modelc2.getValueAt(selectrowc2,5).toString());
        vm1.setVmm(modelc2.getValueAt(selectrowc2,6).toString());

    }//GEN-LAST:event_jButton11MouseClicked

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public NetDatacenterBroker data;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    public MyDatacenter getDatacenter1()
    {
        MyDatacenter datacenter=null;

        String name=modeld1.getValueAt(slectrowd1,1).toString();
        for(int i=0;i<listDataCenter.size();i++)
        {
            if(name.equals(listDataCenter.get(i).getName()))
            {
                return datacenter=listDataCenter.get(i);
            }
        }
        return null;
    }

    public MyHost getHost(List<MyHost> list)
    {

        MyHost host=null;

        String id=modeld2.getValueAt(slectrowd2,0).toString();
        for(int i=0;i<list.size();i++)
        {
            if(id.equals(list.get(i).getId()))
            {
                return host=list.get(i);
            }
        }
        return null;
    }

    public MyPE getPe(List<MyPE> list)
    {
        MyPE pe=null;

        String id=modeld3.getValueAt(slectrowd3,0).toString();
        for(int i=0;i<list.size();i++)
        {
            if(id.equals(list.get(i).getId()))
            {
                return pe=list.get(i);
            }
        }
        return null;
    }


    public MyCloudlet getcloud(List<MyCloudlet> list)
    {
        MyCloudlet cloudlet=null;

        String id=modelc1.getValueAt(selectrowc1,0).toString();
        for(int i=0;i<list.size();i++)
        {
            if(id.equals(list.get(i).getId()))
            {
                return cloudlet=list.get(i);
            }
        }
        return null;
    }

    public MyVM getVm(List<MyVM> listVm)
    {
        MyVM vm=new MyVM();

        String id=modelc2.getValueAt(selectrowc2,0).toString();
        for(int i=0;i<listVm.size();i++)
        {
            if(id.equals(listVm.get(i).getId()))
            {
                return vm=listVm.get(i);
            }
        }
        return null;
    }

    public User getUsre()
    {
        String id=modelU.getValueAt(selectU,0).toString();
        for(User us:listUser)
        {
            if(id.equals(us.getId()))
            {
                return us;
            }
        }


        return null;
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton click;
    private javax.swing.JButton click1;
    private javax.swing.JButton click2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTablec2;
    private javax.swing.JTable jTablec3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable resTable;
    private javax.swing.JPanel sumilation;
    // End of variables declaration//GEN-END:variables
    private static NetworkDatacenter createDatacenter(MyDatacenter datacenter) {

        // Here are the steps needed to create a PowerDatacenter:
        // 1. We need to create a list to store
        // our machine


        // 2. A Machine contains one or more PEs or CPUs/Cores.
        // In this example, it will have only one core.

        List<NetworkHost> hostList = new ArrayList<NetworkHost>();
        for(MyHost host:datacenter.getHost())
        {

            List<Pe> peList = new ArrayList<Pe>();
            for(MyPE pe:host.getListpe())
            {

                int mips =Integer.parseInt(pe.getMips());
                peList.add(new Pe(Integer.parseInt(pe.getId()), new PeProvisionerSimple(mips)));
            }
            // 3. Create PEs and add these into a list.
            // need to store Pe id and MIPS Rating

            // 4. Create Host with its id and list of PEs and add them to the list
            // of machines
            int hostId =Integer.parseInt(host.getId());
            int ram =Integer.parseInt(host.getRam()); // host memory (MB)
            long storage =Integer.parseInt(host.getStorage()); // host storage
            int bw =Integer.parseInt(host.getBw());
            switch(host.getPolic())
            {
                case "0":

                    hostList.add(

                            new NetworkHost(
                                    hostId,
                                    new RamProvisionerSimple(ram),
                                    new BwProvisionerSimple(bw),
                                    storage,
                                    peList,
                                    new VmSchedulerTimeShared(peList)
                            ));
                    break;
                case "1":

                    hostList.add(
                            new NetworkHost(
                                    hostId,
                                    new RamProvisionerSimple(ram),
                                    new BwProvisionerSimple(bw),
                                    storage,
                                    peList,
                                    new VmSchedulerSpaceShared(peList)
                            ));
                    break;
            }
            // This is our machine
        }
        // 5. Create a DatacenterCharacteristics object that stores the
        // properties of a data center: architecture, OS, list of
        // Machines, allocation policy: time- or space-shared, time zone
        // and its price (G$/Pe time unit).
        String arch =datacenter.getCharacteristics().getArchitecture(); // system architecture
        String os =datacenter.getCharacteristics().getOs(); // operating system
        String vmm =datacenter.getCharacteristics().getVmm();
        double time_zone =Double.parseDouble(datacenter.getCharacteristics().getTimeZone()); // time zone this resource located
        double cost = Double.parseDouble(datacenter.getCharacteristics().getCostPerSecond()); // the cost of using processing in this resource
        double costPerMem =Double.parseDouble(datacenter.getCharacteristics().getCostPerMem()); // the cost of using memory in this resource
        double costPerStorage =Double.parseDouble(datacenter.getCharacteristics().getCostPerStorage()); // the cost of using storage in this
        // resource
        double costPerBw =Double.parseDouble(datacenter.getCharacteristics().getCostPerBw()); // the cost of using bw in this resource
        LinkedList<Storage> storageList = new LinkedList<Storage>(); // we are not adding SAN
        // devices by now

        DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
                arch, os, vmm, hostList, time_zone, cost, costPerMem,
                costPerStorage, costPerBw);

        // 6. Finally, we need to create a PowerDatacenter object.
        NetworkDatacenter datacenter1 = null;
        try {

            datacenter1 = new NetworkDatacenter(datacenter.getName(), characteristics,new NetworkVmAllocationPolicy(hostList), storageList, 0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        CreateNetwork(hostList.size(), datacenter1);
        return datacenter1;
    }


    private static NetDatacenterBroker createBroker(String name){

        NetDatacenterBroker broker = null;
        try {
            broker = new NetDatacenterBroker(name);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
        return broker;
    }

    private  void printCloudletList(List<Cloudlet> list) {
        int size = list.size();
        Cloudlet cloudlet;

        String indent = "    ";
        Log.printLine();
        jTextArea1.append("========== OUTPUT ==========\n");
        jTextArea1.append("Cloudlet ID" + indent + "STATUS" + indent +
                "Data center ID" + indent + "VM ID" + indent + indent + "Time" + indent + "Start Time" + indent + "Finish Time\n");

        int line=0;
        DefaultTableModel model= (DefaultTableModel) resTable.getModel();
        line= model.getColumnCount();

        DecimalFormat dft = new DecimalFormat("###.##");
        for (int i = 0; i < size; i++) {
            cloudlet = list.get(i);
            jTextArea1.append(indent + cloudlet.getCloudletId() + indent + indent);


            if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS){
                jTextArea1.append("SUCCESS");

                model.addRow(new Object[0]);
                model.setValueAt(cloudlet.getCloudletId(), line, 0);
                model.setValueAt("SUCCESS", line, 1);
                model.setValueAt(cloudlet.getResourceId(), line, 2);
                model.setValueAt(cloudlet.getVmId(), line, 3);
                model.setValueAt(dft.format(cloudlet.getActualCPUTime()), line, 4);
                model.setValueAt(dft.format(cloudlet.getExecStartTime()), line, 5);
                model.setValueAt(dft.format(cloudlet.getFinishTime()), line, 6);
                line++;



                jTextArea1.append( indent + indent + cloudlet.getResourceId() + indent + indent + indent + cloudlet.getVmId() +
                        indent + indent + indent + dft.format(cloudlet.getActualCPUTime()) +
                        indent + indent + dft.format(cloudlet.getExecStartTime())+ indent + indent + indent + dft.format(cloudlet.getFinishTime())+"\n");
            }
        }

    }



    static void CreateNetwork(int numhost, NetworkDatacenter dc) {

        // Edge Switch
        AggregateSwitch agg=new AggregateSwitch("Agg1",NetworkConstants.Agg_LEVEL, dc);
        int min=dc.getHostList().get(0).getId();
        EdgeSwitch edgeswitch[] = new EdgeSwitch[(numhost+3)/4];

        for (int i = 0; i < (numhost+3)/4; i++) {

            edgeswitch[i] = new EdgeSwitch("Edge" + (min+i), NetworkConstants.EDGE_LEVEL, dc);
            edgeswitch[i].uplinkswitches.add(agg);
            dc.Switchlist.put(edgeswitch[i].getId(), edgeswitch[i]);
            // aggswitch[(int)
            // (i/Constants.AggSwitchPort)].downlinkswitches.add(edgeswitch[i]);
            agg.downlinkswitches.add(edgeswitch[i]);
        }
        System.out.println("********************"+dc.getHostList().size());
        for (Host hs : dc.getHostList()) {
            NetworkHost hs1 = (NetworkHost) hs;
            hs1.bandwidth = NetworkConstants.BandWidthEdgeHost;
            int switchnum = ((int) (hs.getId() / NetworkConstants.EdgeSwitchPort))-min;
            edgeswitch[switchnum].hostlist.put(hs.getId(), hs1);
            dc.HostToSwitchid.put(hs.getId(), edgeswitch[switchnum].getId());
            hs1.sw = edgeswitch[switchnum];
            List<NetworkHost> hslist = hs1.sw.fintimelistHost.get(0D);
            if (hslist == null) {
                hslist = new ArrayList<NetworkHost>();
                hs1.sw.fintimelistHost.put(0D, hslist);
            }
            hslist.add(hs1);

        }
    }
}
